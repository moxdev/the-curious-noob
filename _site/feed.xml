<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">The Curious n00b</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml" />
<link rel="alternate" type="text/html" href="http://localhost:4000" />
<updated>2014-08-19T19:10:18-04:00</updated>
<id>http://localhost:4000/</id>
<author>
  <name>Shane Biggs</name>
  <uri>http://localhost:4000/</uri>
  <email>the.curious.n00b@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[Your Daily Affirmation With Dev Bootcamp]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/your-daily-affirmation-with-dbc/" />
  <id>http://localhost:4000/your-daily-affirmation-with-dbc</id>
  <updated>2014-08-19 14:22:55 -0400T00:00:00-00:00</updated>
  <published>2014-08-19T00:00:00-04:00</published>
  
  <author>
    <name>Shane Biggs</name>
    <uri>http://localhost:4000</uri>
    <email>the.curious.n00b@gmail.com</email>
  </author>
  <content type="html">&lt;h3 id=&quot;im-good-enough-im-smart-enough-and-doggone-it-people-like-me---stuart-smalley&quot;&gt;“I’m good enough, I’m smart enough, and doggone it people like me.” - Stuart Smalley&lt;/h3&gt;

&lt;p&gt;This week we are being asked to discuss some values that we adhere to in our lives. Accomplishment is a big one. Although on a grand scale I haven’t achieved greatness in my accomplishments but I have worked really hard to get my life on track and I feel a sense of accomplishment for that even though I still have a long way to go. I came from a lower middle class family that had just enough money to provide me with life’s necessities but there was no emphasis put on higher education. I worked full time and payed my way through college to become the first college graduated of my family. After college I took a low paying networking internship in a small IT department and worked my way up to junior network administrator with three employees underneath my management. Now with no previous coding experience I’ve made it through Phase 0 of DBC about to start Phase 1 and I can’t wait to add this to my list of accomplishments. Bring it on!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/your-daily-affirmation-with-dbc/&quot;&gt;Your Daily Affirmation With Dev Bootcamp&lt;/a&gt; was originally published by Shane Biggs at &lt;a href=&quot;http://localhost:4000&quot;&gt;The Curious n00b&lt;/a&gt; on August 19, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Stereotype Threat]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/stereotype-threat/" />
  <id>http://localhost:4000/stereotype-threat</id>
  <updated>2014-08-19 13:55:10 -0400T00:00:00-00:00</updated>
  <published>2014-08-19T00:00:00-04:00</published>
  
  <author>
    <name>Shane Biggs</name>
    <uri>http://localhost:4000</uri>
    <email>the.curious.n00b@gmail.com</email>
  </author>
  <content type="html">&lt;h3 id=&quot;the-trappings-of-stereotype-threat&quot;&gt;The Trappings Of Stereotype Threat&lt;/h3&gt;

&lt;p&gt;Being from a Caucasian middle class family I can’t say that I’ve experienced much stereotype threat personally in my life. I have however been surrounded by it for most of my life. I was born and raised in a small town in North Carolina. I witnessed for most of life the struggles of different ethnicities in a predominately white culture. Growing up I thought it was normal that whites lived on one side of town and most minorities lived on the opposite side. This was normal to me. This was just the way the world worked in my small ignorant view of the planet.&lt;/p&gt;

&lt;p&gt;I grew up in a place where racial slurs are just as common as saying hello or goodbye. I’m reminded of a story of one of my first jobs. For this job we would have to go into peoples homes and install custom made blinds for their windows. I remember over hearing management discussing whether or not they should hire a new employee who was African American. He had like 10 years of experience so he was fully qualified but the owners were worried that white people would be scared to let him in their homes because of his race. Thankfully they made the decent decision to hire him despite their fears but that experience has always stuck with me. How terrible it must be to have that extra level of scrutiny added to a prospective job. I have never once thought to myself before an interview, “I wonder if my race will prevent me from getting this job?” I think this is something very hard for whites to wrap their head around since we don’t have to ever think about this. The sad thing is to someone born and raised in that environment, this is normal. This is just the way the world works.&lt;/p&gt;

&lt;p&gt;It wasn’t until I got older and went to college that I realized this is not how the world works at all. When I left the south and moved to the D.C. metropolitan area, I quickly realized that I am the minority here. This city is truly a melting pot of world cultures and ethnicities. On one street here you can find restaurants with cuisine from just about any major country you can think of. Now I have a more personal stake in the Stereotype Threat theory. My wife is Pakistani and Muslim. She’s lived most of her life here in D.C. and says that she has experienced very little racism in her life. But I know from experience that whether or not she has noticed it she’s been judged for her ethnicity and religion many times over. Now with our first child on the way I think about how he will be effected by stereotype threat in a way that I never was. Will he have extra hurdles in life because of his mixed race? We’ve struggled in finding a name we can agree on because I am very conscious about having an American sounding name so his resume is not overlooked which I have personally seen happen. These are things I have never had to think about before in my life.&lt;/p&gt;

&lt;p&gt;So though I have not personally been affected by stereotype type I have been surrounded by it my whole life. Living amongst so many different cultures and experiencing the friendship of people from all different ethnicities has opened my eyes to the struggles that minorities in America and allover the world experience on a daily basis.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/stereotype-threat/&quot;&gt;Stereotype Threat&lt;/a&gt; was originally published by Shane Biggs at &lt;a href=&quot;http://localhost:4000&quot;&gt;The Curious n00b&lt;/a&gt; on August 19, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Designing the UX]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/designing-the-ux/" />
  <id>http://localhost:4000/designing-the-ux</id>
  <updated>2014-08-19 14:38:08 -0400T00:00:00-00:00</updated>
  <published>2014-08-19T00:00:00-04:00</published>
  
  <author>
    <name>Shane Biggs</name>
    <uri>http://localhost:4000</uri>
    <email>the.curious.n00b@gmail.com</email>
  </author>
  <content type="html">&lt;h3 id=&quot;web-design-wireframing&quot;&gt;Web Design: Wireframing&lt;/h3&gt;

&lt;p&gt;In this post I created a mock up of the Twitter, Tumblr, and Udemy websites so that we can briefly discuss how each site constructed some of their user interface elements.&lt;/p&gt;

&lt;p&gt;Twitter has made extremely good use of the entire space of the web page. Twitter designers have managed to fit in all of the important options into the users feed page without being overly distracting or cumbersome.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;search &lt;/li&gt;
  &lt;li&gt;compose &lt;/li&gt;
  &lt;li&gt;settings &lt;/li&gt;
  &lt;li&gt;trending &lt;/li&gt;
  &lt;li&gt;announcements&lt;/li&gt;
&lt;/ul&gt;

&lt;figcaption&gt;Twitter Homepage Wireframe&lt;/figcaption&gt;
&lt;p&gt;&lt;img src=&quot;/images/twitter_wireframe.png&quot; alt=&quot;Twitter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Building on Twitters minimalist design, Tumblr has taken some of the same concepts and applied them to their social blogging site. Again all of the important functions are condensed and easily accessible without causing too much clutter and chaos. With just a few clicks the user can login, post their blog, and be on their way in mere minutes or even seconds!&lt;/p&gt;

&lt;figcaption&gt;Tumblr Homepage Wireframe&lt;/figcaption&gt;
&lt;p&gt;&lt;img src=&quot;/images/tumblr_wireframe.png&quot; alt=&quot;Tumblr&quot; /&gt;						&lt;/p&gt;

&lt;p&gt;For Udemy I chose the page a new visitor without an account would see when they first log onto the site. Udemy designers have managed to fit tons of content into a very minimalist homepage for new users.They keep it very neat and clean with a scrolling list of ‘featured’ courses, a search field, and a course list dropdown.From here the user simply types an interest into the search field or selects from the dropdown menu, and they are instantly redirected to video content related to that subject. The Internet truly has revolutionized the way human beings interact and learn!&lt;/p&gt;

&lt;figcaption&gt;Udemy Homepage Wireframe&lt;/figcaption&gt;
&lt;p&gt;&lt;img src=&quot;/images/udemy_wireframe.png&quot; alt=&quot;Udemy&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/designing-the-ux/&quot;&gt;Designing the UX&lt;/a&gt; was originally published by Shane Biggs at &lt;a href=&quot;http://localhost:4000&quot;&gt;The Curious n00b&lt;/a&gt; on August 19, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Blocks, Procs, and Lambdas]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/blocks-procs-and-lambdas/" />
  <id>http://localhost:4000/blocks-procs-and-lambdas</id>
  <updated>2014-08-19 14:05:22 -0400T00:00:00-00:00</updated>
  <published>2014-08-19T00:00:00-04:00</published>
  
  <author>
    <name>Shane Biggs</name>
    <uri>http://localhost:4000</uri>
    <email>the.curious.n00b@gmail.com</email>
  </author>
  <content type="html">&lt;h3 id=&quot;ruby-blocs-procs-and-lambdas-oh-my&quot;&gt;Ruby Blocs, Procs, and Lambdas Oh My!&lt;/h3&gt;

&lt;p&gt;Today we are going to take a look at one of Ruby’s most powerful features. Ruby uses what are called Blocks, Procs, and Lambdas to pass code to a method and then execute that code at a later point and time. Like most things in Ruby, these three functions perform very similar actions and can often be used interchangeably.&lt;/p&gt;

&lt;p&gt;Lets begin with discussing the Ruby Block. In the image above we have constructed a very simple .map! solution for iterating through an array and multiplying each number by 5. There are two ways to perform this action. First it can be written using the (do..end) syntax that you see in the first example. This syntax would often be used for a block containing multiple lines of code. In the second example you can see the (do..end) block has been replaced with just the curly brackets {}. This version would most often be used for a simple block of code that fits nicely on one line. The code in between the (do..end)and {} is what’s referred to as the block.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/week_6/block.png&quot; alt=&quot;block&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enter the Proc! So we can see here that using the Ruby Proc object of Proc.new, we can perform the same function as our block code. The Proc however is a little different from a block in that you are able to save the code and call it over and over again. You see the block code is simply syntax and as syntax it is disposable. In order to use the block again you must retype it whenever you need it. The Proc remedies this by allowing you to save the code inside of a variable which can then be called later. You must remember to use the &amp;amp; symbol in front of your variable when passing your Proc as an argument like in the example above (&amp;amp;multiply).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/week_6/proc.png&quot; alt=&quot;proc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So what’s the deal with Lambda? It may look like it is performing the exact same function as our previous Proc method but behind the scenes it is behaving very differently. First of all lambda will check to see if the correct number of arguments have been passed to it. If the wrong number of arguments are passed, lambda will issue an ArgumentError. Proc does not behave in the same manner. A Proc will ignore any unexpected arguments and assign nil as the value of any missing arguments. Another key difference is when a lambda returns, it will pass control back to the calling method. When a Proc returns, it returns immediately without going back to the calling method. This can cause different outcomes depending on how your code is written.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/week_6/lambda.png&quot; alt=&quot;lambda&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So as you can see Blocks, Procs, and Lambdas are all very useful for performing certain functions in Ruby code. Go ahead and try it out on your own! I know I will be using them a lot more in my own coding in the future. &lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/blocks-procs-and-lambdas/&quot;&gt;Blocks, Procs, and Lambdas&lt;/a&gt; was originally published by Shane Biggs at &lt;a href=&quot;http://localhost:4000&quot;&gt;The Curious n00b&lt;/a&gt; on August 19, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[A Dangerous Game of SQL Injection]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/a-dangerous-game-of-sql-injection/" />
  <id>http://localhost:4000/a-dangerous-game-of-sql-injection</id>
  <updated>2014-08-19 14:32:29 -0400T00:00:00-00:00</updated>
  <published>2014-08-19T00:00:00-04:00</published>
  
  <author>
    <name>Shane Biggs</name>
    <uri>http://localhost:4000</uri>
    <email>the.curious.n00b@gmail.com</email>
  </author>
  <content type="html">&lt;h3 id=&quot;injection-protection&quot;&gt;Injection Protection&lt;/h3&gt;

&lt;p&gt;The Internet provides the world with a single point of access to seemingly unlimited resources of knowledge and entertainment.To most of us it is simply a matter of browsing to our preferred website, logging in with our username and password, and then going about our business. Most of us take for granted the code behind the scenes that makes all of this work.  &lt;/p&gt;

&lt;p&gt;When you make a new user account for a website your information is stored in a database so it can be accessed later. This information is mostly likely stored in what is called an SQL database. These SQL databases can be used by hackers for nefarious purposes. SQL commands are simple text only inputs but in the wrongs hands they can be powerful tools used to steal user information, delete database information, or even cripple websites. Hackers can use “SQL Injection” to “inject” malicious SQL commands via webpage input. These malicious commands can compromise the security of a web application. A smart hacker can literally insert a new character or two and gain access to private information such as user logins. SQL injections can also be used to redirect users to malicious websites. If your web application becomes infected users may lose confidence in your ability to protect their data and stop using your services.&lt;/p&gt;

&lt;p&gt;Check out this website &lt;a href=&quot;http://sqlzoo.net/hack/&quot; target=&quot;_blank&quot;&gt;SQLZoo&lt;/a&gt; for hands on demonstration of how hackers can use SQL injection to compromise your web application.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/a-dangerous-game-of-sql-injection/&quot;&gt;A Dangerous Game of SQL Injection&lt;/a&gt; was originally published by Shane Biggs at &lt;a href=&quot;http://localhost:4000&quot;&gt;The Curious n00b&lt;/a&gt; on August 19, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Why Does Javascript Matter?]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/why-ddoes-javascript-matter/" />
  <id>http://localhost:4000/why-ddoes-javascript-matter</id>
  <updated>2014-08-19 00:12:02 -0400T00:00:00-00:00</updated>
  <published>2014-08-18T00:00:00-04:00</published>
  
  <author>
    <name>Shane Biggs</name>
    <uri>http://localhost:4000</uri>
    <email>the.curious.n00b@gmail.com</email>
  </author>
  <content type="html">&lt;h3 id=&quot;java-what&quot;&gt;Java What?&lt;/h3&gt;

&lt;p&gt;In today’s world of complicated user interactive websites, it is important for web developers to know and understand JavaScript. You might not realize it but most, if not all, of your favorite websites incorporate JavaScript into their web development to create “dynamic” web pages. Below are some advantages and disadvantages of using JavaScript in Web Development.&lt;/p&gt;

&lt;p&gt;One of the advantages of JavaScript is that it runs on the users computer and uses the computers processor. Entire web based applications can be run right from the browser. It makes it much easier since there is nothing on the server side to configure. This leaves the busy server free to handle other jobs. JS is also be used for data entry validation to check things like valid credit card numbers. It can manipulate cookies to store user information on the browser. These are just some of the many advantages of using JavaScript.&lt;/p&gt;

&lt;p&gt;But JavaScript is not without its disadvantages either. The biggest issue with JS is security. Since JS runs on the client side it can be used to inject malicious code into the users computer spreading malware and viruses. Another problem is that different browsers render JavaSrcipt differently resulting in inconsistencies across browsers. Overall the advantages of making dynamic JavaScript websites seem to outweigh the disadvantages.&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/why-ddoes-javascript-matter/&quot;&gt;Why Does Javascript Matter?&lt;/a&gt; was originally published by Shane Biggs at &lt;a href=&quot;http://localhost:4000&quot;&gt;The Curious n00b&lt;/a&gt; on August 18, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Understanding HTML Margin, Border, and Padding]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/understanding-html-margins-borders-and-padding/" />
  <id>http://localhost:4000/understanding-html-margins-borders-and-padding</id>
  <updated>2014-08-18 21:27:15 -0400T00:00:00-00:00</updated>
  <published>2014-08-18T00:00:00-04:00</published>
  
  <author>
    <name>Shane Biggs</name>
    <uri>http://localhost:4000</uri>
    <email>the.curious.n00b@gmail.com</email>
  </author>
  <content type="html">&lt;h3 id=&quot;make-your-html-elements-dance&quot;&gt;Make Your HTML Elements Dance&lt;/h3&gt;

&lt;p&gt;Understanding how to move the elements into the correct position is by far one of the most important concepts of building a web page. Without this understanding it is possible to build a very simple web site but impossible to build a great website.&lt;/p&gt;

&lt;p&gt;Let’s first take a look at the CSS “Box Model.” Each HTML element is essentially a container or “Box”. Looking at the representation of the HTML box below you can see that it consists of three parts: margin, border, and padding. The size of each of the three different layers can be changed by specifying the “em, %, or px” for each property. Each property in turn has multiple ways to specify its sizes. Read here for more information on the properties and values:    &lt;a href=&quot;http://www.w3schools.com/cssref/pr_margin.asp&quot; target=&quot;_blank&quot; title=&quot;Margin&quot;&gt;Margin&lt;/a&gt;  &lt;a href=&quot;http://www.w3schools.com/css/css_border.asp&quot; target=&quot;_blank&quot; title=&quot;border&quot;&gt;Border&lt;/a&gt;  &lt;a href=&quot;http://www.w3schools.com/css/css_padding.asp&quot; target=&quot;_blank&quot; title=&quot;Padding&quot;&gt;Padding&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/week_2/margin.png&quot; alt=&quot;Box&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;&lt;a href=&quot;http://www.washington.edu/accesscomputing/webd2/student/unit3/module4/lesson1.html&quot; target=&quot;_blank&quot; title=&quot;Source&quot;&gt;Source&lt;/a&gt;&lt;/figcaption&gt;

&lt;p&gt;Here is a very basic example of how to create a simple box containing content using the “Box Model” concepts.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#box&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;#box&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;borer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;border-style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;solid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;border-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;darkgrey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So as you can see understanding the “box” concepts are instrumental in understanding how to move your elements around the page using CSS. This is fundamental part of HTML/CSS that needs to be mastered in order to create awesome looking, functional website.&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/understanding-html-margins-borders-and-padding/&quot;&gt;Understanding HTML Margin, Border, and Padding&lt;/a&gt; was originally published by Shane Biggs at &lt;a href=&quot;http://localhost:4000&quot;&gt;The Curious n00b&lt;/a&gt; on August 18, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[To Pair Or Not To Pair]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/to-pair-or-not-to-pair/" />
  <id>http://localhost:4000/to-pair-or-not-to-pair</id>
  <updated>2014-08-19 00:53:31 -0400T00:00:00-00:00</updated>
  <published>2014-08-18T00:00:00-04:00</published>
  
  <author>
    <name>Shane Biggs</name>
    <uri>http://localhost:4000</uri>
    <email>the.curious.n00b@gmail.com</email>
  </author>
  <content type="html">&lt;h3 id=&quot;what-is-pair-programming&quot;&gt;What Is Pair Programming?&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/week_5/ruby_cat.jpg&quot; alt=&quot;Ruby&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’m going to admit it…I’m a loner. Well when it comes to completing tasks anyway. I would usually rather struggle through something on my own then admit that I don’t know what I’m doing or asking for help out of a fear of looking stupid. As I’m writing this I’m thinking to myself, “Why am I like this? This sounds like a silly way to go about a task!” But alas, this is just the nature of some people I suppose. With that said let’s discuss this new, and for some controversial, idea of pair programming.&lt;/p&gt;

&lt;p&gt;So what exactly is pair programming? Pair programming is an “Agile Software Development” technique. The idea is basically to have two different coders writing code at the same machine. The pair consists of the “driver” and the “navigator,” who write code on the same computer. The driver is in charge of typing the code while the navigator watches for any mistakes and thinks about different ways to implement the code as well as the overall structure of the code. Using this technique leaves the driver able to focus on the technical side of creating code while the navigator is free to think about the overall code of the project as well as check for any mistakes in the code made by the driver. Some studies have shown that using this technique can increase productivity and decrease errors in the code. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/week_5/good_coders.jpg&quot; alt=&quot;Coders&quot; /&gt;						&lt;/p&gt;

&lt;p&gt;Those of us in Phase 0 should be getting used to using this technique by now. I have to admit the first few weeks my stomach was in knots before a paring session. It’s a bad feeling when you are new to coding and your pair seems to know exactly where to go with the code while you are still trying to figure out exactly what the instructions for the project even mean! This week for the first time I’ve come to terms with the fact that I need to pair and I need to pair often. Even though I still get nervous and sometimes feel inferior when I’m working with a more experienced boot, I learn. This week really for the first time I’ve let my fears fall away and learned to enjoy the complexities of the challenges instead of fearing them. “What is this Greek I’m looking at in front of me?!” Take a deep breath, step back and figure it out. If you cant figure it out on your own it’s ok to admit you need help. Your life will not crumble before your eyes if you do so. And most importantly pair and pair often!&lt;/p&gt;

&lt;p&gt;So after the pair there’s this “feedback” thing you also have to complete. At first I thought this was a nuisance. It still seems sort of tedious at times especially when it’s 11:49 PM on Sunday night and you haven’t submitted yet! This week though I am starting to see the value in this as well. I’ve gotten a few good critical feedback suggestions that have really helped me understand a big flaw in my coding process that I am now trying to remedy and it has helped me tremendously. Yesterday for the first time a boot asked me to do feedback right then an there in person. At first I thought this was strange and was a little caught off guard. After we finished the feedback I thought it was kind of nice to listen to the persons feedback instead of reading it later. The boot actually gave me one of the most beneficial pieces of constructive criticism yet and made me realize I need to work on that to become a better coder. So I guess the moral of this story is to trust the DBC process. It may seem a bit strange and even scary or chaotic at times, but there does seem to be a method to their madness. So I leave you with this bit of advice from a n00b with just a few months of coding experience under his belt. Pair. Pair often. Pair as much as you can and listen to your feedback and try to make changes that will help you once you get to the big show on Aug 25th at DBC. Trust the process!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/to-pair-or-not-to-pair/&quot;&gt;To Pair Or Not To Pair&lt;/a&gt; was originally published by Shane Biggs at &lt;a href=&quot;http://localhost:4000&quot;&gt;The Curious n00b&lt;/a&gt; on August 18, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Thinking About Thinking]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/thinking-about-thinking/" />
  <id>http://localhost:4000/thinking-about-thinking</id>
  <updated>2014-08-18 21:43:40 -0400T00:00:00-00:00</updated>
  <published>2014-08-18T00:00:00-04:00</published>
  
  <author>
    <name>Shane Biggs</name>
    <uri>http://localhost:4000</uri>
    <email>the.curious.n00b@gmail.com</email>
  </author>
  <content type="html">&lt;h3 id=&quot;which-mindset-are-you&quot;&gt;Which Mindset Are You?&lt;/h3&gt;

&lt;p&gt;The Gregoric Thinking Style groups a person’s “thinking style” into 4 general groups. Concrete, Abstract, Sequential, and Random. I think I would fit solidly into the Concrete Sequential. A person with Concrete Sequential thinking prefers order, stability, directions, not working in groups, a structured learning environment, etc. Pretty much the exact opposite of DBC! To a CS thinker Phase 0 of DBC seems like a Abstract Random free for all!&lt;/p&gt;

&lt;p&gt;For a person like me DBC is going to be a challenge. I like structure. I like order. Not having instructions makes me panic. Phase 0 has been a whirl wind of emotions and pushing myself beyond my comfort zone. This is exactly why I chose DBC over the coding schools. I want to be pushed. If they let me I will sit int he back of the class never saying a word and working by myself. I want to learn to be the person who steps up to a challenge without being forced. I want to get over my fear of public speaking and be able to express my ideas to a large group of strangers without feeling like I’m going to throw up.&lt;/p&gt;

&lt;figcaption&gt;Fixed Mindset vs Growth Mindset&lt;/figcaption&gt;
&lt;p&gt;&lt;img src=&quot;/images/week_3/mind.jpg&quot; alt=&quot;Thinking&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And as a double whammy I have a lot of the “Fixed Mindset” characteristics of the “Fixed vs Growth Mindset” theory. I tend to avoid challenges out of fear of failure and have a somewhat deterministic view of the world. I’m trying to become more of a Growth Mindset personality. I’ve stepped outside my comfort zone just about everyday since I’ve started Phase 0 and its getting easier day by day. I’ve found that my structured way of learning and completing my challenges doesn’t cut it in DBC. Next week I’m starting a while new way of doing things to try and management my time better.I’ve realized in the world of coding you cant spend 4 hours trying to move an element around in CSS when you have several other tasks to complete. It doesn’t matter if its perfect or not you just have to move on. This is very hard for me to accept. If I let myself I will spend all freaking day trying to move an element to the opposite side of my webpage. Time management and limiting my expectations to match my abilities are the two biggest things I will work on going forward in DBC. I’m willing to change are you?&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/thinking-about-thinking/&quot;&gt;Thinking About Thinking&lt;/a&gt; was originally published by Shane Biggs at &lt;a href=&quot;http://localhost:4000&quot;&gt;The Curious n00b&lt;/a&gt; on August 18, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[The Tech Industry's Human Problem]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/the-tech-industrys-human-problem/" />
  <id>http://localhost:4000/the-tech-industrys-human-problem</id>
  <updated>2014-08-19 00:20:54 -0400T00:00:00-00:00</updated>
  <published>2014-08-18T00:00:00-04:00</published>
  
  <author>
    <name>Shane Biggs</name>
    <uri>http://localhost:4000</uri>
    <email>the.curious.n00b@gmail.com</email>
  </author>
  <content type="html">&lt;h3 id=&quot;the-invisible-cost-of-the-gadgets-we-love&quot;&gt;The Invisible Cost Of The Gadgets We Love&lt;/h3&gt;

&lt;p&gt;Most of us today love our gadgets. They have become part of us in many ways. We’ve all had those moments of reaching in our pockets and realizing our phone is missing…then the panic sets in. These tiny pocket size computers are filled with some of our most precious information and tools we use to navigate through life on a daily basis. Most of us never realize the true cost of these machines as we unwrap the shiny packages and dance around on Christmas Day when we receive the latest greatest version of a device we desire. There is a human cost that is never factored into the price of tech industry’s most coveted devices.&lt;/p&gt;

&lt;p&gt;Now I feel I must give full disclosure as I am about to journey down the path of bashing a company of which I own several of their devices. I am an Apple fan and have been for many years. I own thousands of dollars worth of their equipment and have no intention to stop buying them in the near future. In the context of this article I am choosing to pick on apple not because they are the only or even the worst Tech industry human rights violators, but because they have become a symbol of wealth, power, and corporate dominance over mankind.&lt;/p&gt;

&lt;figcaption&gt;Apple Production Facility - China&lt;/figcaption&gt;
&lt;p&gt;&lt;img src=&quot;/images/week_4/workers.jpg&quot; alt=&quot;Thinking&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In some of Apple’s Chinese factories workers are asked to stand for upwards of 12 hours a day with only two 30 minute breaks in between. Some of these factories are open six days a week. now Apple claims they have a self imposed 60 hour a week limit for workers, but some Chinese human rights organizations have reported 70 hour work weeks in different plants. China Labor Watch claims that most factory workers are subjected to harsh chemicals, noise, and lasers on a daily basis without adequate protection provided by the company. There have been several reports of workers dying from exposure to chemicals or even committing suicide because of the harsh working and living conditions near the plants.&lt;/p&gt;

&lt;p&gt;Now in some aspects Apple should be commended for recently taking some steps to remedy the working conditions in their overseas factories. Apple is the first and only technology company to be admitted to the Fair Labor Association because of these steps they have taken. But their is much more work that needs to be done. Heavy regulations must be enforced by the cooperation of the U.S. and Chinese governments. Corporations usually exclaim that if we regulate these things the prices of their products will increase which in turn will hurt them and their consumers. This may be true in some aspects but the markup on some of these tech products is outrageous and I would argue there is a happy medium where a giant tech corporation worth upwards of $600 Billion dollars can afford to shave off some profits to protect the people who literally create those profits. It is important to understand that all tech companies not just Apple share in this burden. I hope that in the future as the IT industry grows, it can learn to balance profits with the welfare of its workers.&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/the-tech-industrys-human-problem/&quot;&gt;The Tech Industry's Human Problem&lt;/a&gt; was originally published by Shane Biggs at &lt;a href=&quot;http://localhost:4000&quot;&gt;The Curious n00b&lt;/a&gt; on August 18, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[The Culture of Dev Bootcamp]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/the-culture-of-dev-bootcamp/" />
  <id>http://localhost:4000/the-culture-of-dev-bootcamp</id>
  <updated>2014-08-18 19:41:05 -0400T00:00:00-00:00</updated>
  <published>2014-08-18T00:00:00-04:00</published>
  
  <author>
    <name>Shane Biggs</name>
    <uri>http://localhost:4000</uri>
    <email>the.curious.n00b@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Is Dev Bootcamp the right fit for you? The question we’ve all no doubt been asking ourselves for the past few months. Watching Shereef’s ‘Fireside Chat’ conjured feelings of sheer excitement, pure terror, a metaphorical rebirth, uncertainty, and a slew of other emotions all at once! For a year I’ve tied my gut up in knots over and over again trying to decide if DBC was worth quiting my cushy job, tearing my self away from my family, and uprooting myself to the other end of the country all for nothing more than the promise of a chance. There’s something both simultaneously empowering and terrifying about having your fate in your on hands. It’s right there in front of you all you have to do is reach out and take it.&lt;/p&gt;

&lt;p&gt;I am Shereef’s friend that he spoke about in the video. A junior system administrator that always wanted to be a coder but was told not to bother unless I get a 4 year Computer Science degree from a university. The moment I read the first article about DBC I knew there was something special happening in San Francisco that I needed to be a part of. The prospect of creating something special with code and being a part of something as special as DBC is no doubt going to be one of, if not the most fantastic experience of my life. I think learning by doing is the easiest way to learn a new skill. DBC’s method of pairing us into groups and forcing all of us to take charge at certain points, instead of sitting at the back of class not saying anything, will only make us better, stronger coders when we get into the workforce. For me giving up is not an option because wearing a suit and tie to a cubicle for the next 30-40 years is not an option!&lt;/p&gt;

&lt;p&gt;The wonderful life I’m leaving behind to become a coder…and yes this is every IT department you’ve ever called!&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/rksCTVFtjM4&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/the-culture-of-dev-bootcamp/&quot;&gt;The Culture of Dev Bootcamp&lt;/a&gt; was originally published by Shane Biggs at &lt;a href=&quot;http://localhost:4000&quot;&gt;The Curious n00b&lt;/a&gt; on August 18, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Ruby: {Hash} vs [Array]]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/ruby-hash-vs-array/" />
  <id>http://localhost:4000/ruby-hash-vs-array</id>
  <updated>2014-08-19 00:33:04 -0400T00:00:00-00:00</updated>
  <published>2014-08-18T00:00:00-04:00</published>
  
  <author>
    <name>Shane Biggs</name>
    <uri>http://localhost:4000</uri>
    <email>the.curious.n00b@gmail.com</email>
  </author>
  <content type="html">&lt;h3 id=&quot;ruby-array-and-hash-structure&quot;&gt;Ruby Array and Hash Structure&lt;/h3&gt;

&lt;p&gt;I selfishly chose the topic of Hash’s and Array’s in the hopes that after creating this blog you and I would both be more educated on the subject so lets begin! &lt;/p&gt;

&lt;p&gt;Both arrays and hashes are a rather simple way for Ruby to store a list of items called “elements.” The list of elements contained in each format can be comprised of many different types of things, or as we say in Ruby “objects.” Each method however handles its elements in a different fashion.&lt;/p&gt;

&lt;h3 id=&quot;the-ruby-array&quot;&gt;The Ruby Array&lt;/h3&gt;

&lt;p&gt;Arrays are structured using the bracket symbol [ ]. Inside the bracket you can have a different mix of of different types of elements. For example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see an array can hold several different types of elements within the same array. There are several methods built into Ruby that allow you access to the elements of your array. You can count your elements, count the entire length of the array, see which element is at which point in the array and so on. The array holds each element in a certain position starting at 0 and counting up until it reaches the last element. For example the array [1,2,3,4] would count the position of its elements at 0,1,2,3. This position is called the elements “index.” Notice how the index starts at 0 instead of 1 so the index list will always be 1 less than the total number of elements. It is important to remember that since an array holds these elements in a certain position, the elements are kept in order and can only be accessed in this particular order.&lt;/p&gt;

&lt;h3 id=&quot;the-ruby-hash&quot;&gt;The Ruby Hash&lt;/h3&gt;

&lt;p&gt;A hash stores elements in a slightly different way using what is called key-value pairs inside curly brackets { }. In the image above you can see the variable “inst_section” holds a group of key-value pairs. The left side objects following the colon are the keys and the right side are the values assigned to each key. You can tell the value by looking for the =&amp;gt; symbol. The value will alway follow this symbol. The keys do not have to be prefaced with a colon. They could just as easily be strings. For example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;grades&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
	&lt;span class=&quot;s2&quot;&gt;&amp;quot;Bob&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;82&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	&lt;span class=&quot;s2&quot;&gt;&amp;quot;Jim&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;94&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	&lt;span class=&quot;s2&quot;&gt;&amp;quot;Shelly&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;89&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now much like the arrays you can access each element either by using the key or the value. It is important to remember however that hashes do not store the elements in any particular order so if you want an ordered list you must use an array. But if you don’t care about order and you just want to store a key pair value use a hash.&lt;/p&gt;

&lt;p&gt;This is just the tip of the iceberg of what arrays and hashes can be used for. In fact Ruby uses arrays and hashes for just about everything! So if you just need a simple list of ordered objects feel free to use and array but if you need to store your elements in an unordered list, use the a hash.&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/ruby-hash-vs-array/&quot;&gt;Ruby: {Hash} vs [Array]&lt;/a&gt; was originally published by Shane Biggs at &lt;a href=&quot;http://localhost:4000&quot;&gt;The Curious n00b&lt;/a&gt; on August 18, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Ruby Has Class!]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/ruby-has-class/" />
  <id>http://localhost:4000/ruby-has-class</id>
  <updated>2014-08-19 01:05:40 -0400T00:00:00-00:00</updated>
  <published>2014-08-18T00:00:00-04:00</published>
  
  <author>
    <name>Shane Biggs</name>
    <uri>http://localhost:4000</uri>
    <email>the.curious.n00b@gmail.com</email>
  </author>
  <content type="html">&lt;h3 id=&quot;classy-ruby&quot;&gt;Classy Ruby&lt;/h3&gt;

&lt;p&gt;Today we are going to take a look at creating a Ruby class. Ruby uses class statements which contain methods that work on the object. As your programs gets larger and more complicated Ruby needs classes so that you can have several of the same methods being performed on different objects. When you call the method later Ruby will know exactly which methods you are trying to perform because they have been defined by their class.&amp;lt;&lt;/p&gt;

&lt;div class=&quot;links&quot;&gt;&lt;img src=&quot;/images/week_5/tech_1.png&quot; alt=&quot;CSS Box Model&quot; /&gt;&lt;p&gt;

In the image above you can see the beginnings of our very simple Person class we will use to store information about people. This class will need three things for input to be able to create the new person: first_name, last_name, and age. We need to use the initialize method here so we can call these variables later in our program. These are called instance variables and are denoted by using the @ symbol.
							

&lt;div class=&quot;links&quot;&gt;&lt;img src=&quot;/images/week_5/tech_2.png&quot; alt=&quot;CSS Box Model&quot; /&gt;&lt;p&gt;

We can now use this class statement to create as many new Person&#39;s as we like. Let&#39;s go through &quot;p1&quot; and take at look at its format. First you give the new object a name (p1 or whatever you like it&#39;s up to you) and then call the Person.new class and provide the required information which in this case is their first name, last name , and age.
						
&lt;div class=&quot;links&quot;&gt;&lt;img src=&quot;/images/week_5/tech_3.png&quot; alt=&quot;CSS Box Model&quot; /&gt;&lt;p&gt;

With the new persons created you can now use the Person class to do many cool things with the information you have stored. We&#39;ve gone back and added a new method called &quot;person_info&quot; to the class. We can know take the information you have entered for each new person and have Ruby print out a nice little sentence using that information. In this case Ruby should tell us the person&#39;s first and last name and their age. 

							
&lt;div class=&quot;links&quot;&gt;&lt;img src=&quot;/images/week_5/tech_4.png&quot; alt=&quot;CSS Box Model&quot; /&gt;&lt;p&gt;

As you can see from the above image, Ruby prints out a nice little sentence about each person. Man Bill Murray is getting up there in years but he&#39;s still awesome! This was just a very simple and basic example of what you can do with a Ruby class. You can add as many methods as you like to perform all sorts of creative functions on the objects. Go ahead and give it try!
&lt;/p&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/ruby-has-class/&quot;&gt;Ruby Has Class!&lt;/a&gt; was originally published by Shane Biggs at &lt;a href=&quot;http://localhost:4000&quot;&gt;The Curious n00b&lt;/a&gt; on August 18, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Let's Talk Web Design]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/lets-talk-web-design/" />
  <id>http://localhost:4000/lets-talk-web-design</id>
  <updated>2014-08-18 19:50:59 -0400T00:00:00-00:00</updated>
  <published>2014-08-18T00:00:00-04:00</published>
  
  <author>
    <name>Shane Biggs</name>
    <uri>http://localhost:4000</uri>
    <email>the.curious.n00b@gmail.com</email>
  </author>
  <content type="html">&lt;h3 id=&quot;why-web-design-matters&quot;&gt;Why Web Design Matters&lt;/h3&gt;

&lt;p&gt;What constitutes web site nirvana is different for each user who browses the web. A bad choice of colors, images, or difficult navigation is enough to make users turn and run after just mere seconds of visiting a site. The design of your site itself is almost as important as the content since your homepage will makes the first impressions on the visiting users. But what kind of design makes a good web site?&lt;/p&gt;

&lt;p&gt;One of my favorite web sites is &lt;a href=&quot;https://www.twitter.com&quot; target=&quot;_blank&quot; title=&quot;twitter.com&quot;&gt;&lt;strong&gt;Twitter&lt;/strong&gt;&lt;/a&gt; and what makes it stand out to me is its simplicity. The site, whether visited from a desktop or a mobile device, is clutter free with all the important application functions front and center making the readability and functions of the application simple for the user. Not sure if anyone could have predicted the success of twitter when it was in its infancy, but it has become a power house in the news industry. I use it almost exclusively to get live, real-time updates of current event and news. All of this information is literally at my fingertips. With a few simple clicks, I can search using the front-and-center search bar, create my own tweet, or discover new interesting account to follow in the future. It’s amazing that such a simple creation has single handedly revolutionized the news industry around the entire globe.&lt;/p&gt;

&lt;figcaption&gt;Twitter Homepage&lt;/figcaption&gt;
&lt;p&gt;&lt;img src=&quot;/images/twitter.png&quot; alt=&quot;Twitter Homepage&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another of my favorite websites is &lt;a href=&quot;https://www.tumblr.com&quot; target=&quot;_blank&quot; title=&quot;Tumblr.com&quot;&gt;&lt;strong&gt;Tumblr&lt;/strong&gt;&lt;/a&gt;. Following the same model as twitter, Tumblr has created a simple, easy to use, and almost completely customizable web application for aspiring blogger’s. Everything the user needs is right at the tip of their finger. But Tumblr isn’t just a blogging site, its also a social site. Users can follow, comment, share, and discover millions of other blogs all stored in one simple web app. I specifically think the design of the tool bar at the top is elegant. Most everything the user needs is a one-touch click on the top of the page. The site also offers plenty of customization so users are able to create beautiful blog pages for their followers to read.&lt;/p&gt;

&lt;figcaption&gt;Tumblr Homepage&lt;/figcaption&gt;
&lt;p&gt;&lt;img src=&quot;/images/tumblr.png&quot; alt=&quot;Tumblr Homepage&quot; /&gt;						&lt;/p&gt;

&lt;p&gt;My last example I’d like to discuss is &lt;a href=&quot;https://www.udemy.com/&quot; target=&quot;_blank&quot; title=&quot;Udemy.com&quot;&gt;&lt;strong&gt;Udemy&lt;/strong&gt;&lt;/a&gt;. While not as well known as Twitter and Tumbler, Udemy has created a beautiful web application which takes a very complex stream of instructional videos and packages them in a way that is easy for users to search and organize. Search is prominent and always easily accessible. Once again simplicity is the key factor in making this site exceptional. The user has the ability to store and organize an almost unlimited amount of video content with minimal and very easy to understand navigation buttons. Unlike Twitter and Tumblr, some of their content is not free but they do offer many useful free videos on all sorts of topics especially Ruby and Ruby on Rails!&lt;/p&gt;

&lt;figcaption&gt;Udemy Homepage&lt;/figcaption&gt;
&lt;p&gt;&lt;img src=&quot;/images/udemy.png&quot; alt=&quot;Tumblr Homepage&quot; /&gt;  						&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/lets-talk-web-design/&quot;&gt;Let's Talk Web Design&lt;/a&gt; was originally published by Shane Biggs at &lt;a href=&quot;http://localhost:4000&quot;&gt;The Curious n00b&lt;/a&gt; on August 18, 2014.&lt;/p&gt;</content>
</entry>

</feed>
